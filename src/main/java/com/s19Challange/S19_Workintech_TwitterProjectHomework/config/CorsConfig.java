package com.s19Challange.S19_Workintech_TwitterProjectHomework.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

//Bu sÄ±nÄ±fÄ±n Srping yapÄ±landÄ±rma sÄ±nÄ±fÄ± olduÄŸunu belirttik Configuration anatosyonu ile.
//Spring Boot, uygulama baÅŸladÄ±ÄŸÄ±nda bu sÄ±nÄ±fÄ± otomatik olarak algÄ±lar ve iÃ§indeki yapÄ±landÄ±rmalarÄ± uygular.
@Configuration
//Spring MVC'nin geliÅŸmiÅŸ Ã¶zelliklerini etkinleÅŸtirir.
//Ancak Srping Boot projelerinde genellikle gerekli deÄŸildir, Ã§Ã¼nkÃ¼ Spring Boot zaten Web MVC yapÄ±landÄ±rmasÄ±nÄ±
//kendisi yÃ¶netir. EÄŸer manuel MVC yapÄ±landÄ±rmasÄ± yapmayacaksak, bu anatosyonu kullanmamÄ±za gerek yok.
@EnableWebMvc
//WebMvcConfigurer ile Spring MVC yapÄ±landÄ±rmalarÄ±nÄ± deÄŸiÅŸtirmek iÃ§in kullanÄ±rÄ±z.
//Burada, CORS ayarlarÄ±nÄ± Ã¶zelliÅŸtirmek iÃ§in addCorsMapping methodunu kullanÄ±yoruz.
public class CorsConfig implements WebMvcConfigurer {
    //Spring Boot'un CORS(Cross-Origin Resource Sharing) ayarlarÄ±nÄ± deÄŸiÅŸtirmek iÃ§in kullanÄ±lÄ±r.
    //CorseRegistry nesnesi, hangi kaynaklara izin verileceÄŸini belirlememizi saÄŸlar.
    @Override
    public void addCorsMappings(CorsRegistry registry)
    {
        //Bu ÅŸekilde tÃ¼m urlere CORS ayarÄ± uygula diyoruz. API'deki tÃ¼m urller iÃ§in
        registry.addMapping("/**")
                //Hangi frontend domainine izin verildiÄŸini belirtme, Sadece http://localhost:3200 adresinden gelen
                //istekleri kabul eder. Bu React veya Angular frontendinin Ã§alÄ±ÅŸtÄ±ÄŸÄ± port ile eÅŸleÅŸmelidir.
                //EÄŸer tÃ¼m domainlere izin vermek istersen .allowedOriginPatterns("*") yazacaksÄ±n.
                .allowedOrigins("http://localhost:3200")
                //Ä°zin verilen http metodlarÄ±
                .allowedMethods("GET","POST","PUT","DELETE","OPTIONS")
                //Ã‡erezlerin (Cookies) GÃ¶nderilmesine Ä°zin Verme
                //Frontendâ€™in, backendâ€™e Ã§erez gÃ¶ndermesine ve backendâ€™den Ã§erez almasÄ±na izin verir.
                //Ã–zellikle JSESSIONID gibi oturum yÃ¶netimi Ã§erezlerinin gÃ¶nderilebilmesi iÃ§in gereklidir.
                //EÄŸer bu ayar false olursa, tarayÄ±cÄ± backendâ€™den gelen JSESSIONID Ã§erezini reddeder ve oturum yÃ¶netimi Ã§alÄ±ÅŸmaz.
                //Ã–nemli not: .allowCredentials(true) kullanÄ±yorsan, allowedOrigins("*") kullanamzyÄ±z. Bunun yerine belirli
                //domainleri eklemelisin.
                .allowCredentials(true)
                //CORS yanÄ±tlarÄ±nÄ± Ã¶nbelleÄŸe Alma sÃ¼resi
                //TarayÄ±cÄ±nÄ±n, CORS izinlerini ne kadar sÃ¼re Ã¶nbelleÄŸe alacaÄŸÄ±nÄ± belirler.
                //3600 saniye (1 saat) boyunca tarayÄ±cÄ± tekrar tekrar OPTIONS isteÄŸi atmak yerine Ã¶nbellekten kullanÄ±r.
                .maxAge(3600);
    }

    /*
    CORS YapÄ±landÄ±rmasÄ±nÄ± Neden YapÄ±yoruz?

    CORS (Cross-Origin Resource Sharing, Ã‡apraz Kaynak PaylaÅŸÄ±mÄ±), tarayÄ±cÄ±larÄ±n bir domain (kÃ¶ken) Ã¼zerinden baÅŸka
    bir domainâ€™e API isteÄŸi yapmasÄ±nÄ± gÃ¼venlik nedeniyle engelleyen bir mekanizmadÄ±r.
ğŸš¨  Problem:
    VarsayÄ±lan olarak tarayÄ±cÄ±lar, farklÄ± bir kÃ¶kenden (origin) gelen API isteklerini engeller.

    Ã–rneÄŸin, frontend (http://localhost:3200) Ã¼zerinden backend (http://localhost:3000) APIâ€™sine istek attÄ±ÄŸÄ±nda
    CORS hatasÄ± alÄ±rsÄ±n.

    Backendâ€™e CORS yapÄ±landÄ±rmasÄ± ekleyerek, bu engeli kaldÄ±rÄ±rÄ±z.

     */
}
